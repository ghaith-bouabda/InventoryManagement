/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addSaleItem } from '../fn/sale-controller/add-sale-item';
import { AddSaleItem$Params } from '../fn/sale-controller/add-sale-item';
import { createSale } from '../fn/sale-controller/create-sale';
import { CreateSale$Params } from '../fn/sale-controller/create-sale';
import { getSaleByInvoiceNumber } from '../fn/sale-controller/get-sale-by-invoice-number';
import { GetSaleByInvoiceNumber$Params } from '../fn/sale-controller/get-sale-by-invoice-number';
import { removeSaleItem } from '../fn/sale-controller/remove-sale-item';
import { RemoveSaleItem$Params } from '../fn/sale-controller/remove-sale-item';
import { Sale } from '../models/sale';
import { updateSale } from '../fn/sale-controller/update-sale';
import { UpdateSale$Params } from '../fn/sale-controller/update-sale';

@Injectable({ providedIn: 'root' })
export class SaleControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateSale()` */
  static readonly UpdateSalePath = '/api/sales/{saleId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSale()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSale$Response(params: UpdateSale$Params, context?: HttpContext): Observable<StrictHttpResponse<Sale>> {
    return updateSale(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSale$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSale(params: UpdateSale$Params, context?: HttpContext): Observable<Sale> {
    return this.updateSale$Response(params, context).pipe(
      map((r: StrictHttpResponse<Sale>): Sale => r.body)
    );
  }

  /** Path part for operation `createSale()` */
  static readonly CreateSalePath = '/api/sales';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createSale()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSale$Response(params: CreateSale$Params, context?: HttpContext): Observable<StrictHttpResponse<Sale>> {
    return createSale(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createSale$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSale(params: CreateSale$Params, context?: HttpContext): Observable<Sale> {
    return this.createSale$Response(params, context).pipe(
      map((r: StrictHttpResponse<Sale>): Sale => r.body)
    );
  }

  /** Path part for operation `addSaleItem()` */
  static readonly AddSaleItemPath = '/api/sales/{saleId}/items';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addSaleItem()` instead.
   *
   * This method doesn't expect any request body.
   */
  addSaleItem$Response(params: AddSaleItem$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return addSaleItem(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addSaleItem$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addSaleItem(params: AddSaleItem$Params, context?: HttpContext): Observable<void> {
    return this.addSaleItem$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getSaleByInvoiceNumber()` */
  static readonly GetSaleByInvoiceNumberPath = '/api/sales/invoice/{invoiceNumber}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSaleByInvoiceNumber()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSaleByInvoiceNumber$Response(params: GetSaleByInvoiceNumber$Params, context?: HttpContext): Observable<StrictHttpResponse<Sale>> {
    return getSaleByInvoiceNumber(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSaleByInvoiceNumber$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSaleByInvoiceNumber(params: GetSaleByInvoiceNumber$Params, context?: HttpContext): Observable<Sale> {
    return this.getSaleByInvoiceNumber$Response(params, context).pipe(
      map((r: StrictHttpResponse<Sale>): Sale => r.body)
    );
  }

  /** Path part for operation `removeSaleItem()` */
  static readonly RemoveSaleItemPath = '/api/sales/{saleId}/items/{saleItemId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeSaleItem()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeSaleItem$Response(params: RemoveSaleItem$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return removeSaleItem(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeSaleItem$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeSaleItem(params: RemoveSaleItem$Params, context?: HttpContext): Observable<void> {
    return this.removeSaleItem$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
