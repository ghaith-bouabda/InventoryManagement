/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createFournisseur } from '../fn/supplier-controller/create-fournisseur';
import { CreateFournisseur$Params } from '../fn/supplier-controller/create-fournisseur';
import { deleteFournisseur } from '../fn/supplier-controller/delete-fournisseur';
import { DeleteFournisseur$Params } from '../fn/supplier-controller/delete-fournisseur';
import { getAllFournisseurs } from '../fn/supplier-controller/get-all-fournisseurs';
import { GetAllFournisseurs$Params } from '../fn/supplier-controller/get-all-fournisseurs';
import { getFournisseur } from '../fn/supplier-controller/get-fournisseur';
import { GetFournisseur$Params } from '../fn/supplier-controller/get-fournisseur';
import { SupplierDto } from '../models/supplier-dto';
import { updateFournisseur } from '../fn/supplier-controller/update-fournisseur';
import { UpdateFournisseur$Params } from '../fn/supplier-controller/update-fournisseur';

@Injectable({ providedIn: 'root' })
export class SupplierControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getFournisseur()` */
  static readonly GetFournisseurPath = '/fournisseurs/{slug}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFournisseur()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFournisseur$Response(params: GetFournisseur$Params, context?: HttpContext): Observable<StrictHttpResponse<SupplierDto>> {
    return getFournisseur(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFournisseur$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFournisseur(params: GetFournisseur$Params, context?: HttpContext): Observable<SupplierDto> {
    return this.getFournisseur$Response(params, context).pipe(
      map((r: StrictHttpResponse<SupplierDto>): SupplierDto => r.body)
    );
  }

  /** Path part for operation `updateFournisseur()` */
  static readonly UpdateFournisseurPath = '/fournisseurs/{slug}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateFournisseur()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFournisseur$Response(params: UpdateFournisseur$Params, context?: HttpContext): Observable<StrictHttpResponse<SupplierDto>> {
    return updateFournisseur(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateFournisseur$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFournisseur(params: UpdateFournisseur$Params, context?: HttpContext): Observable<SupplierDto> {
    return this.updateFournisseur$Response(params, context).pipe(
      map((r: StrictHttpResponse<SupplierDto>): SupplierDto => r.body)
    );
  }

  /** Path part for operation `deleteFournisseur()` */
  static readonly DeleteFournisseurPath = '/fournisseurs/{slug}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteFournisseur()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFournisseur$Response(params: DeleteFournisseur$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteFournisseur(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteFournisseur$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFournisseur(params: DeleteFournisseur$Params, context?: HttpContext): Observable<void> {
    return this.deleteFournisseur$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `createFournisseur()` */
  static readonly CreateFournisseurPath = '/fournisseurs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createFournisseur()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createFournisseur$Response(params: CreateFournisseur$Params, context?: HttpContext): Observable<StrictHttpResponse<SupplierDto>> {
    return createFournisseur(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createFournisseur$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createFournisseur(params: CreateFournisseur$Params, context?: HttpContext): Observable<SupplierDto> {
    return this.createFournisseur$Response(params, context).pipe(
      map((r: StrictHttpResponse<SupplierDto>): SupplierDto => r.body)
    );
  }

  /** Path part for operation `getAllFournisseurs()` */
  static readonly GetAllFournisseursPath = '/fournisseurs/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllFournisseurs()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllFournisseurs$Response(params?: GetAllFournisseurs$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SupplierDto>>> {
    return getAllFournisseurs(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllFournisseurs$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllFournisseurs(params?: GetAllFournisseurs$Params, context?: HttpContext): Observable<Array<SupplierDto>> {
    return this.getAllFournisseurs$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SupplierDto>>): Array<SupplierDto> => r.body)
    );
  }

}
