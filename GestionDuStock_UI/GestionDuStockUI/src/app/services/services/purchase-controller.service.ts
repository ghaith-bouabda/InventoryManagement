/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createPurchase } from '../fn/purchase-controller/create-purchase';
import { CreatePurchase$Params } from '../fn/purchase-controller/create-purchase';
import { deletePurchase } from '../fn/purchase-controller/delete-purchase';
import { DeletePurchase$Params } from '../fn/purchase-controller/delete-purchase';
import { getAllPurchases } from '../fn/purchase-controller/get-all-purchases';
import { GetAllPurchases$Params } from '../fn/purchase-controller/get-all-purchases';
import { getPurchaseByInvoiceNumber } from '../fn/purchase-controller/get-purchase-by-invoice-number';
import { GetPurchaseByInvoiceNumber$Params } from '../fn/purchase-controller/get-purchase-by-invoice-number';
import { getPurchaseBySupplier } from '../fn/purchase-controller/get-purchase-by-supplier';
import { GetPurchaseBySupplier$Params } from '../fn/purchase-controller/get-purchase-by-supplier';
import { PurchaseDto } from '../models/purchase-dto';

@Injectable({ providedIn: 'root' })
export class PurchaseControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllPurchases()` */
  static readonly GetAllPurchasesPath = '/api/purchases';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPurchases()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPurchases$Response(params?: GetAllPurchases$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PurchaseDto>>> {
    return getAllPurchases(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPurchases$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPurchases(params?: GetAllPurchases$Params, context?: HttpContext): Observable<Array<PurchaseDto>> {
    return this.getAllPurchases$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PurchaseDto>>): Array<PurchaseDto> => r.body)
    );
  }

  /** Path part for operation `createPurchase()` */
  static readonly CreatePurchasePath = '/api/purchases';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createPurchase()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPurchase$Response(params: CreatePurchase$Params, context?: HttpContext): Observable<StrictHttpResponse<PurchaseDto>> {
    return createPurchase(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createPurchase$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPurchase(params: CreatePurchase$Params, context?: HttpContext): Observable<PurchaseDto> {
    return this.createPurchase$Response(params, context).pipe(
      map((r: StrictHttpResponse<PurchaseDto>): PurchaseDto => r.body)
    );
  }

  /** Path part for operation `getPurchaseBySupplier()` */
  static readonly GetPurchaseBySupplierPath = '/api/purchases/{slug}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPurchaseBySupplier()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPurchaseBySupplier$Response(params: GetPurchaseBySupplier$Params, context?: HttpContext): Observable<StrictHttpResponse<PurchaseDto>> {
    return getPurchaseBySupplier(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPurchaseBySupplier$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPurchaseBySupplier(params: GetPurchaseBySupplier$Params, context?: HttpContext): Observable<PurchaseDto> {
    return this.getPurchaseBySupplier$Response(params, context).pipe(
      map((r: StrictHttpResponse<PurchaseDto>): PurchaseDto => r.body)
    );
  }

  /** Path part for operation `getPurchaseByInvoiceNumber()` */
  static readonly GetPurchaseByInvoiceNumberPath = '/api/purchases/invoice/{invoiceNumber}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPurchaseByInvoiceNumber()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPurchaseByInvoiceNumber$Response(params: GetPurchaseByInvoiceNumber$Params, context?: HttpContext): Observable<StrictHttpResponse<PurchaseDto>> {
    return getPurchaseByInvoiceNumber(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPurchaseByInvoiceNumber$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPurchaseByInvoiceNumber(params: GetPurchaseByInvoiceNumber$Params, context?: HttpContext): Observable<PurchaseDto> {
    return this.getPurchaseByInvoiceNumber$Response(params, context).pipe(
      map((r: StrictHttpResponse<PurchaseDto>): PurchaseDto => r.body)
    );
  }

  /** Path part for operation `deletePurchase()` */
  static readonly DeletePurchasePath = '/api/purchases/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deletePurchase()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePurchase$Response(params: DeletePurchase$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deletePurchase(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deletePurchase$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePurchase(params: DeletePurchase$Params, context?: HttpContext): Observable<void> {
    return this.deletePurchase$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }
  getTotalPurchases(): Observable<number> {
    return this.http.get<number>(`${this.rootUrl}/api/purchases/total-purchases`);
  }

}
